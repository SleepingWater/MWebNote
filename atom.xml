<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[学习笔记]]></title>
  <link href="https://sleepingwater.github.io/MWebNote/atom.xml" rel="self"/>
  <link href="https://sleepingwater.github.io/MWebNote/"/>
  <updated>2018-01-19T01:53:42+08:00</updated>
  <id>https://sleepingwater.github.io/MWebNote/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[第二章：词法作用域]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14978876951045.html"/>
    <updated>2017-06-19T23:54:55+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14978876951045.html</id>
    <content type="html"><![CDATA[
<p>1、词法阶段<br/>
* 作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫做”遮蔽效应“。<br/>
* 全局变量会自动成为全局对象（比如浏览器中的window对象）的属性，因此可以不直接通过全局对象的此法名称，而是间接地通过对全局对象属性的引用来对齐进行访问。window.a 通过这种技术可以访问哪些被同名变量所遮蔽的全局变量。而非全局的变量如果被遮蔽了，就无法被访问到了。</p>

<p>2、欺骗词法<br/>
2.1、eval()</p>

<pre><code>function foo(str,a){
    eval(str);//欺骗！
    console.log(b,a);
}
var b=1;
foo(&quot;var b=3;&quot;,1);
</code></pre>

<p>2.2、with()</p>

<pre><code>function foo(obj){
    with(obj){
        a = 2;
    }
}
var o1 = {a:3};
var o2 = {b:3};
foo(o1);
console.log(o1.a);//2
foo(o2);
console.log(o2.a);//undefined
console.log(a);//2 a被泄露到全局作用域上了
</code></pre>

<p><strong>不推荐使用eval()和with</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三章：函数作用域和块作用域]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14978935513574.html"/>
    <updated>2017-06-20T01:32:31+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14978935513574.html</id>
    <content type="html"><![CDATA[
<ul>
<li>第三方库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间。</li>
<li><p>函数表达式。</p>

<pre><code>var a = 2;
(function(def){
    def(window)
})(function def(global){
    var a = 3;
    console.log(a);//3
    console.log(global.a);//2
})  
</code></pre></li>
<li><p>块作用域</p>

<ol>
<li>with</li>
<li>try/catch</li>
<li>let</li>
<li>const</li>
</ol></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四章：提升]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14979642997081.html"/>
    <updated>2017-06-20T21:11:39+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14979642997081.html</id>
    <content type="html"><![CDATA[
<ul>
<li>函数声明会被提升到普通变量之前</li>
<li>重复的var声明会被忽略，但出现在后面的函数声明还是可以覆盖前面的</li>
<li>IIFE（立即执行函数表达式）</li>
</ul>

<pre><code>(function sleep(x){
    console.log(&#39;I want &#39;+x);
})(&#39;sleep&#39;);
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五章：作用域闭包]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14979651540114.html"/>
    <updated>2017-06-20T21:25:54+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14979651540114.html</id>
    <content type="html"><![CDATA[
<ul>
<li>对函数类型的值进行传递时，保留对它被声明的位置所处的作用域的引用。</li>
<li>只要使用了回调函数，实际上就是在使用闭包！so回调函数丢失外部函数调用对象</li>
</ul>

<pre><code>for (var i = 1; i &lt;= 5; i++) {
    setTimeout( function timer(){
        console.log(i);
    },i*1000);
}
//每隔1秒输出6
</code></pre>

<ul>
<li>块作用域。let劫持一个块儿并且就在这个块儿中声明一个变量，这实质上将块儿变成了一个我们可以闭包的作用域。</li>
<li>模块</li>
</ul>

<pre><code>function CoolModule(){
    var something = &quot;cool&quot;;
    var another = [1,2,3,4,5];
    function doSomething(){
        console.log(something);
    }
    function doAnother(){
        console.log(another.join(&quot;,&quot;));
    }
    return {
        doSomething:doSomething,
        doAnother:doAnother,
    };
}
var foo = CoolModule();
foo.doSomething();
foo.doAnother();
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一章：关于this]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14980689294470.html"/>
    <updated>2017-06-22T02:15:29+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14980689294470.html</id>
    <content type="html"><![CDATA[
<ul>
<li>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</li>
</ul>

<h1 id="toc_0">第二章：this全面解析</h1>

<ol>
<li>默认绑定：纯粹的函数调用，this代表全局对象window。</li>
<li>隐示绑定：作为对象的方法调用，this代表上级对象。</li>
<li>显示绑定：apply() call()。</li>
<li>new绑定：作为构造函数调用，new一个全新的对象。</li>
</ol>

<p>ES6中的箭头函数，不适用于以上四种规则<br/>
<strong>优先级：new绑定 &gt; 显示绑定 &gt; 隐示绑定 &gt; 默认绑定</strong></p>

<h1 id="toc_1">关于apply() call()</h1>

<p>call和apply都是为了改变this而存在的，即改变函数内部的this指向。或者说改变某个函数运行时的上下文。<br/>
<strong>注：</strong>js的一个特点，函数存在【定义时上下文】【运行时上下文】以及【上下文是可以改变的】</p>

<p>一些常用用法（使用自己没有，但是别人有的方法）</p>

<ol>
<li>数组之间追加</li>
</ol>

<pre><code>var arr1 = [1,2,3];
var arr2 = [a,b,c];
Array.prototype.push.apply(arr1,arr2);
</code></pre>

<ol>
<li>获取数组中的最大值和最小值</li>
</ol>

<pre><code>var numbers = [11,23,13,4,9]
var maxNumber = Math.max.apply(Math,numbers);
</code></pre>

<ol>
<li>验证是否是数组</li>
</ol>

<pre><code>function isArray(obj){
    return object.prototype.toString().call(obj)===&quot;[object Array]&quot;
}
</code></pre>

<ol>
<li>类（伪）数组使用数组方法</li>
</ol>

<pre><code>var domNodes = Array.prototype.slice.apply(document.getElementsByTagName(&quot;*&quot;))
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于apply() call()]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14985664640586.html"/>
    <updated>2017-06-27T20:27:44+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14985664640586.html</id>
    <content type="html"><![CDATA[
<p>call和apply都是为了改变this而存在的，即改变函数内部的this指向。或者说改变某个函数运行时的上下文。<br/>
<strong>注：</strong>js的一个特点，函数存在【定义时上下文】【运行时上下文】以及【上下文是可以改变的】</p>

<p>一些常用用法（使用自己没有，但是别人有的方法）</p>

<ol>
<li>数组之间追加</li>
</ol>

<pre><code>var arr1 = [1,2,3];
var arr2 = [a,b,c];
Array.prototype.push.apply(arr1,arr2);
</code></pre>

<ol>
<li>获取数组中的最大值和最小值</li>
</ol>

<pre><code>var numbers = [11,23,13,4,9]
var maxNumber = Math.max.apply(Math,numbers);
</code></pre>

<ol>
<li>验证是否是数组</li>
</ol>

<pre><code>function isArray(obj){
    return object.prototype.toString().call(obj)===&quot;[object Array]&quot;
}
</code></pre>

<ol>
<li>类（伪）数组使用数组方法</li>
</ol>

<pre><code>var domNodes = Array.prototype.slice.apply(document.getElementsByTagName(&quot;*&quot;))
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/14996054012366.html"/>
    <updated>2017-07-09T21:03:21+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/14996054012366.html</id>
    <content type="html"><![CDATA[
<p>把创建实例对象的职责和管理单利的职责分别放置在两个方法里，这两个方法可以独立变化而不影响，当它们连接在一起的时候，就完成了创建唯一实例对象的功能。</p>

<pre><code>var getSingle = function(fn){
    var result;//用变量resule来保存fn的计算结果。resule变量因为身在闭包中，它永远不会被销毁。在将来的请求中，如果result已经被赋值，那么它将返回这个值。
    return function(){
        return result || (result = fn.apply(this,arguments))
    }
}
var createDiv = function(){
    return &#39;abc&#39;;
}
var createSingleDiv = getSingle(createDiv);
var a = createSingleDiv();
var b = createSingleDiv();
a===b //true
</code></pre>

<h1 id="toc_0">策略模式</h1>

<p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p>

<pre><code>var strategies = {
    &quot;S&quot;: function(salary){
        return salary*5;
    },
    &quot;A&quot;: function(salary){
        return salary*3;
    },
    &quot;B&quot;: function(salary){
    return salary;
    }
};
var calculateBonus = function(level,salary){
    return strategies[level](salary);
};
console.log(calculateBonus(&quot;S&quot;,2000));
console.log(calculateBonus(&quot;A&quot;,1000));
</code></pre>

<h1 id="toc_1">迭代器模式</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15021077667841.html"/>
    <updated>2017-08-07T20:09:26+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15021077667841.html</id>
    <content type="html"><![CDATA[
<p>promise的内容分为构造函数、实例方法和静态方法<br/>
* 1个构造函数：new Promise<br/>
* 2个实例方法：.then和.catch<br/>
* 4个静态方法：Promise.all、Promise.race(不常用)、Promise.resolve和Promise.reject</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三章 Java的基本程序设计结构]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15066269056845.html"/>
    <updated>2017-09-29T03:28:25+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15066269056845.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">3.3 数量类型</h3>

<p>8种数据类型</p>

<ul>
<li>整型（int,short,long,type）</li>
<li>浮点型（float,double）</li>
<li>char类型</li>
<li>boolean型</li>
</ul>

<h3 id="toc_1">3.4 变量</h3>

<p>使用关键字final定义常量</p>

<h3 id="toc_2">3.5 运算符</h3>

<p>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型。<br/>
否则，如果其中一个操作数是float类型，另一个操作数就会转换为float类型。<br/>
否则，如果其中一个操作数是long类型，另一个操作数就会转换为long类型。<br/>
否则，两个操作数都将被转换为int类型</p>

<p>枚举类型</p>

<h3 id="toc_3">3.6 字符串</h3>

<p>3.6.5 空串和null</p>

<pre><code>//判断字符串不为空也不为null 
if(str != null &amp;&amp; str.length() != 0)    //*注意要先检查null
</code></pre>

<p>3.6.9 构建字符串<br/>
有些时候，需要由较短的字符串构建字符串，采购字符串连接的方式效率比较低。每次连接字符串，都会构建一个新的string对象，即耗时又浪费空间。这时候应该使用StringBuilder</p>

<pre><code>StringBuilder builder = new StringBuilder();
//每次需要添加一部分内容时就调用append
builder.append(ch);
builder.append(str);
//在需要构建字符串时就调用toString方法
String completeString = builder.toString();
</code></pre>

<p><mark><em>StringBuilder的前身是StringBuffer，其效率稍有点低，但是允许采用多线程的方式执行添加或删除字符串。如果所有字符串在一个线程中编辑，应该使用StringBuilder。</em></mark></p>

<h3 id="toc_4">3.7 输入输出</h3>

<p>3.7.1 输入<br/>
    构建一个Scanner对象</p>

<p>3.7.2 格式化输出<br/>
<img src="media/15066269056845/15066790016619.jpg" alt=""/></p>

<h3 id="toc_5">3.8 控制流程</h3>

<p>3.8.6 中断控制流程语句</p>

<ul>
<li>goto为java的保留字，但是不建议使用</li>
<li>不带标签的break</li>
<li>带标签的break（用于跳出多重嵌套的循环语句），用起来感觉和锚点有点像</li>
</ul>

<h3 id="toc_6">3.10 数组</h3>

<p>3.10.3 数组拷贝<br/>
    java中允许将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组。<br/>
    如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用Arrays类的copyTo方法。</p>

<p>3.10.4 命令行参数<br/>
    每一个Java应用程序都有一个带String arg[]参数的main方法。这个参数表明mian方法将接受一个字符串数组，也就是命令行参数。<br/>
    java Message hello world</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一章：作用域是什么]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15066746963163.html"/>
    <updated>2017-09-29T16:44:56+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15066746963163.html</id>
    <content type="html"><![CDATA[
<p>1、编译原理</p>

<p>程序中的一段源代码执行之前会经历三个步骤</p>

<ol>
<li>分词/词法分析</li>
<li>解析/语法分析</li>
<li>代码生成</li>
</ol>

<p>对于JavaScript来说，大部分情况下编译发生在代码执行前的几微秒（甚至更短）</p>

<p>2、理解作用域</p>

<p>2.1、参与处理过程的演员们</p>

<ol>
<li>引擎</li>
<li>编译器</li>
<li>作用域</li>
</ol>

<p>2.2、对话</p>

<p>可以合理地假设编译器所产生的代码能够用下面的伪代码进行概括：”为一个变量分配内存，将其命名为a，然后将2保存进这个变量。“然后这并不完全正确。<br/>
事实上会进行如下操作<br/>
1. 遇到var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。<br/>
2. 在运行时引擎会在作用域中查找该变量，如果能找到就给它赋值。</p>

<p>2.3编译器有话说<br/>
LHS和RHS<br/>
异常：如果RHS没有找到某个变量会抛出异常，如果LHS没有找到某个变量，会创建一个该名称的变量。</p>

<p>3、作用域嵌套<br/>
当前作用域没有找到某个变量时，引擎会在外层嵌套的作用域中继续查找。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四章 对象与类]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15066839297532.html"/>
    <updated>2017-09-29T19:18:49+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15066839297532.html</id>
    <content type="html"><![CDATA[
<p>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。<br/>
可以显示地讲对象变量设置为null，表明这个对象变量目前没有引用任何对象。<br/>
如果将一个方法应用于一个值为null的对象上，就会产生错误。</p>

<pre><code>birthday = null;
String s = birthday.toString();//runtime error!
</code></pre>

<p>4.3.4 关于构造器</p>

<ul>
<li>构造器与类同名</li>
<li>每个类可以有一个以上的构造器</li>
<li>构造器可以有0个、1个或多个参数</li>
<li>构造器没有返回值</li>
<li>构造器总是伴随着new关键字调用</li>
</ul>

<p>4.3.5 隐示参数和显示参数<br/>
this表示隐示参数</p>

<h3 id="toc_0">4.4 静态域与静态方法</h3>

<p>4.4.1 静态域<br/>
这里给Employee类添加一个实例域id和静态域nextId</p>

<pre><code>class Employee{
    private static int nextId = 1;
    private int id;
    ...
}
</code></pre>

<p>如果有1000个Employee类的对象，则有1000个实例域id，但是只有一个静态域nextId。即使没有Employee类的对象，静态域nextId也存在，它属于类，不属于任何独立的对象。</p>

<p>4.4.2 静态常量<br/>
静态变量使用的较少，但静态常量使用的比较多。比如Math类中的PI</p>

<pre><code>public class Math{
    ...
    public static final double PI = 3.14159265388979323846;
    ...
}
</code></pre>

<p>4.4.3 静态方法<br/>
静态方法是一种不能向对象实施操作的方法。例如，Math类的pow方法就是一个静态方法。表达式<br/>
<code>Math.pow(x,a)</code>计算幂。在运算时，不适用任何Math对象。换句话说，没有隐式的参数this。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从数据结构及算法理论层面讨论MySQL数据库索引的数理基础]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15241259610738.html"/>
    <updated>2018-04-19T16:19:21+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15241259610738.html</id>
    <content type="html"><![CDATA[
<p>MySQL数据库支持多种索引类型，如BTree索引，哈希索引，全文索引等等。平常使用MySQL时主要打交道的索引是BTree索引。</p>

<h3 id="toc_0">1.索引的本质</h3>

<ul>
<li>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构</strong>。</li>
<li>提取句子主干，就可以得到索引的本质：索引是数据结构。</li>
<li>查找算法：顺序查找、<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95">二分查找法</a>、<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">二叉树查找</a>等。但是每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构。所以，<strong>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引</strong>。</li>
</ul>

<p><img src="media/15161190344824/15161201436062.jpg" alt=""/><br/>
虽然这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现的。目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构。</p>

<h3 id="toc_1">2.B-Tree</h3>

<p><img src="media/15161190344824/15161202731296.jpg" alt=""/></p>

<p>由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。</p>

<h3 id="toc_2">3.B+Tree</h3>

<p>与B-Tree相比，B+Tree有以下不同点：</p>

<ol>
<li>每个节点的指针上限为2d而不是2d+1。</li>
<li>内节点不存储data，只存储key；叶子节点不存储指针。</li>
</ol>

<p><img src="media/15161190344824/15161208157034.jpg" alt=""/></p>

<p>由于并不是所有节点都具有相同的域，因此B+Tree中叶节点和内节点一般大小不同。这点与B-Tree不同，虽然B-Tree中不同节点存放的key和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现中B-Tree往往对每个节点申请同等大小的空间。<br/>
一般来说，B+Tree比B-Tree更适合实现外存储索引结构，具体原因与外存储器原理及计算机存取原理有关，将在下面讨论。</p>

<h3 id="toc_3">4.带有顺序访问指针的B+Tree</h3>

<p><img src="media/15161190344824/15161219444826.jpg" alt=""/></p>

<p>如图所示，在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>

<h3 id="toc_4">5.主存存取原理</h3>

<p><img src="media/15161190344824/15162921330213.jpg" alt=""/><br/>
从抽象角度看，主存是一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。每个存储单元有唯一的地址，现代主存的编址规则比较复杂，这里将其简化成一个二维地址：通过一个行地址和一个列地址可以唯一定位到一个存储单元。图5展示了一个4 x 4的主存模型。<br/>
主存的存取过程如下：<br/>
当系统需要读取主存时，则将地址信号放到地址总线上传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线上，供其它部件读取。<br/>
写主存的过程类似，系统将要写入单元地址和数据分别放在地址总线和数据总线上，主存读取两个总线的内容，做相应的写操作。<br/>
这里可以看出，主存存取的时间仅与存取次数呈线性关系，因为不存在机械操作，两次存取的数据的“距离”不会对时间有任何影响，例如，先取A0再取A1和先取A0再取D3的时间消耗是一样的。</p>

<h3 id="toc_5">6.磁盘存取原理</h3>

<p>索引一般以文件形式存储在磁盘上，索引检索需要磁盘I/O操作。与主存不同，磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。<br/>
<img src="media/15161190344824/15162922423529.jpg" alt=""/><br/>
一个磁盘由大小相同且同轴的圆形盘片组成，磁盘可以转动（各个磁盘必须同步转动）。在磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不能转动，但是可以沿磁盘半径方向运动（实际是斜切向运动），每个磁头同一时刻也必须是同轴的，即从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）。</p>

<p><img src="media/15161190344824/15162923577123.jpg" alt=""/><br/>
盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。<br/>
当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间。</p>

<h3 id="toc_6">7.局部性原理与磁盘预读</h3>

<p>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：<br/>
当一个数据被用到时，其附近的数据也通常会马上被使用。<br/>
程序运行期间所需要的数据通常比较集中。<br/>
由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。<br/>
预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p>

<h3 id="toc_7">8.B-/+Tree索引的性能分析</h3>

<p>到这里终于可以分析B-/+Tree索引的性能了。<br/>
上文说过一般使用磁盘I/O次数评价索引结构的优劣。先从B-Tree分析，根据B-Tree的定义，可知检索一次最多需要访问h个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：<br/>
每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。<br/>
B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logd<br/>
N)。一般实际应用中，出度d是非常大的数字，通常超过100，因此h非常小（通常不超过3）。<br/>
综上所述，用B-Tree作为索引结构效率是非常高的。<br/>
而红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。<br/>
上文还说过，B+Tree更适合外存索引，原因和内节点出度d有关。从上面分析可以看到，d越大索引的性能越好，而出度的上限取决于节点内key和data的大小：<br/>
dmax<br/>
= floor(pagesize / (keysize + datasize + pointsize)) (pagesize – dmax &gt;= pointsize)<br/>
或<br/>
dmax<br/>
= floor(pagesize / (keysize + datasize + pointsize)) – 1 (pagesize – dmax &lt; pointsize)<br/>
floor表示向下取整。由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，拥有更好的性能。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结合MyISAM和InnDB存储引擎介绍非聚集索引和聚集索引两种不同的索引实现形式]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15241259766481.html"/>
    <updated>2018-04-19T16:19:36+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15241259766481.html</id>
    <content type="html"><![CDATA[
<p>在MySQL中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，下面主要讨论MyISAM和InnoDB两个存储引擎的索引实现方式。</p>

<h3 id="toc_0">1.MyISAM索引实现</h3>

<p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图：<img src="media/15162928494857/15162929235762.jpg" alt=""/></p>

<p>这里设表一共有三列，假设我们以Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示意。可以看出MyISAM的索引文件仅仅保存数据记录的地址。<strong>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。</strong>如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：<br/>
<img src="media/15162928494857/15162944444395.jpg" alt=""/><br/>
同样也是一颗B+Tree，data域保存数据记录的地址。因此，<strong>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</strong><br/>
MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p>

<h3 id="toc_1">2.InnoDB索引实现</h3>

<p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。<br/>
<strong>第一个重大区别是InnoDB的数据文件本身就是索引文件</strong>。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p>

<p><img src="media/15162928494857/15162946040460.jpg" alt=""/><br/>
可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。<br/>
<strong>第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。</strong>换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：<br/>
<img src="media/15162928494857/15162946833768.jpg" alt=""/></p>

<p><strong>聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</strong></p>

<p><em>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[索引使用策略及优化]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15241259944269.html"/>
    <updated>2018-04-19T16:19:54+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15241259944269.html</id>
    <content type="html"><![CDATA[
<p>MySQL的优化主要分为结构优化（Scheme optimization）和查询优化（Query optimization）。本章讨论的高性能索引策略主要属于结构优化范畴。</p>

<p>示例数据库<br/>
<img src="media/15162949131559/15162950373255.jpg" alt=""/></p>

<p><em>注意：这里有一点需要注意，理论上索引对顺序是敏感的，但是由于MySQL的查询优化器会自动调整where子句的条件顺序以使用适合的索引</em></p>

<h3 id="toc_0">1.最左前缀原理与相关优化</h3>

<ol>
<li>全列匹配。（索引可以被用到）</li>
<li>最左前缀匹配。（索引第一列起效）</li>
<li>查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。（结果和情况二相同。可以使用一种称之为“隔离列”的优化方法，如果中间条件有限，将中间条件用in）</li>
<li>查询条件没有指定索引第一列。（索引不起效）</li>
<li>范围查询（范围列可以用到索引（必须是最左前缀），但是范围列后面的列无法用到索引。同时，索引最多用于一个范围列，因此如果查询条件中有两个范围列则无法全用到索引。<em>这里没明白</em>）<em>这里特别要说明MySQL一个有意思的地方，那就是仅用explain可能无法区分范围索引和多值匹配，因为在type中这两者都显示为range。同时，用了“between”并不意味着就是范围查询，</em></li>
<li>查询条件中含有函数或表达式。（索引不起效）</li>
</ol>

<h3 id="toc_1">2.索引选择性与前缀索引</h3>

<p>既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？答案是否定的。因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引。</p>

<ol>
<li>第一种情况是表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，让查询做全表扫描就好了。至于多少条记录才算多，这个个人有个人的看法，我个人的经验是以2000作为分界线，记录数不超过 2000可以考虑不建索引，超过2000条可以酌情考虑索引。</li>
<li>另一种不建议建索引的情况是索引的选择性较低。所谓索引的选择性（Selectivity），是指不重复的索引值（也叫基数，Cardinality）与表记录数（#T）的比值：
Index Selectivity = Cardinality / #T
显然选择性的取值范围为(0, 1]，选择性越高的索引价值越大，这是由B+Tree的性质决定的。</li>
</ol>

<p>有一种与索引选择性有关的索引优化策略叫做前缀索引，就是用列的前缀代替整个列作为索引key，当前缀长度合适时，可以做到既使得前缀索引的选择性接近全列索引，同时因为索引key变短而减少了索引文件的大小和维护开销。<br/>
如果频繁按名字搜索员工，这样显然效率很低，因此我们可以考虑建索引。有两种选择，建&lt;first_name&gt;或&lt;first_name, last_name&gt;，更优秀的方案是&lt;first_name, left(last_name, 3)&gt;</p>

<p><em>前缀索引兼顾索引大小和查询速度，但是其缺点是不能用于ORDER BY和GROUP BY操作，也不能用于Covering index（即当索引本身包含查询所需全部数据时，不再访问数据文件本身）。</em></p>

<h3 id="toc_2">3.InnoDB的主键选择与插入优化</h3>

<p>在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。<br/>
经常看到有帖子或博客讨论主键选择问题，有人建议使用业务无关的自增主键，有人觉得没有必要，完全可以使用如学号或身份证号这种唯一字段作为主键。不论支持哪种论点，大多数论据都是业务层面的。如果从数据库索引优化角度看，使用InnoDB引擎而不使用自增主键绝对是一个糟糕的主意。<br/>
上文讨论过InnoDB的索引实现，InnoDB使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）。<br/>
如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。</p>

<p><img src="media/15162949131559/15162979901459.jpg" alt=""/><br/>
这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。<br/>
如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置：<br/>
<img src="media/15162949131559/15162979999782.jpg" alt=""/><br/>
此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。<br/>
因此，只要可以，请尽量在InnoDB上采用自增字段做主键。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模式匹配类型使用扩展的正则表达式]]></title>
    <link href="https://sleepingwater.github.io/MWebNote/15241260738659.html"/>
    <updated>2018-04-19T16:21:13+08:00</updated>
    <id>https://sleepingwater.github.io/MWebNote/15241260738659.html</id>
    <content type="html"><![CDATA[
<p>当你使用这个类型来测试一个匹配，要使用REGEXP和NOT REGEXP操作（或者RLIKE和NOT RLIKE，他们是同意词）。下面的列表描述了一些扩展正则表达式的特征：</p>

<ul>
<li>“.” 匹配任意单个字符。</li>
<li>一个字符类“[...]&quot;匹配括号里的任意字符，例如，&quot;[abc]&quot;匹配“a&quot;,&quot;b&quot;,或&quot;c&quot;,要指定字符范围，可以使用“-&quot;,例如，“[a-z]&quot;匹配任意字母，而“[0-9]&quot;匹配任意数字。</li>
<li>“<em>&quot;匹配0个或多个在它前面的东西。例如，“x</em>“匹配任意个x字符，&quot;[0-9]<em>&quot;匹配任意个数字，“.</em>&quot;匹配任意个字符。</li>
<li>一个REGEXP模式匹配成功的条件是，模式在测试值中的任意地方匹配即可。（这与LIKE模式匹配不同，LIKE模式匹配成功需要匹配整个值）。</li>
<li>想让模式匹配测试值的开头或结尾，可以使用“<sup>&quot;开头作为模式的开头或用“$&quot;作为模式的结尾。</sup></li>
</ul>

<pre><code>//找到只包含5个字符的名字
SELECT * FROM users WHERE name REGEXP &#39;^.....$&#39;;//一个中文要三个点
等价于
SELECT * FROM users WHERE name REGEXP &#39;^.{5}$&#39;;
</code></pre>

]]></content>
  </entry>
  
</feed>
